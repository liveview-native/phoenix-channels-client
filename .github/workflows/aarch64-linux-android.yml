# based on https://github.com/xaynetwork/cargo_tai
name: aarch64-linux-android

on: pull_request

env:
  ANDROID_COMMANDLINE_TOOLS_VERSION: 9477386
  ANDROID_API: 33
  ANDROID_NDK_VERSION: 25.2.9519653
  ANDROID_SYSTEM_IMAGE_PACKAGE: system-images;android-33;google_apis_playstore;arm64-v8a
  OPENSSL_VERSION: 1.1.1s
  TOOLCHAIN: nightly
  CARGO_TERM_COLOR: always
  CARGO_NDK_REV: "8478e58"
  CARGO_DINGHY_REV: "78df50e"

jobs:
  integration_tests:
    # rust cross-compilation
    # macos-*-xlarge is needed to get M1 chips - https://github.blog/2023-10-02-introducing-the-new-apple-silicon-powered-m1-macos-larger-runner-for-github-actions/
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-linux-android
          default: true

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ env.CARGO_NDK_REV }}-${{ env.CARGO_DINGHY_REV }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-ndk
        run: |
          if ! command -v cargo-ndk &> /dev/null; then
            cargo install --git  https://github.com/bbqsrc/cargo-ndk --rev ${CARGO_NDK_REV}
          fi

      - name: Install cargo-dinghy
        run: |
          if ! command -v cargo-dinghy &> /dev/null; then
            cargo install --git https://github.com/sonos/dinghy.git --force --rev ${CARGO_DINGHY_REV} cargo-dinghy
          fi
      - name: Set up Elixir
        run: brew install elixir
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: tests/support/test_server/deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: tests/support/test_server/_build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache target
        id: cache-target
        uses: actions/cache@v4
        env:
          cache-name: cache-target
        with:
          path: target
          key: ${{ github.workflow }}-${{ github.job }}-${{ env.cache-name }}-${{ env.TOOLCHAIN }}-cargo-${{ env.CARGO_NDK_REV }}-${{ env.CARGO_DINGHY_REV }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build phoenix_channels_client
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets
      - name: Install hex

        run: mix local.hex --force
      - name: Install rebar3
        run: mix local.rebar --force
      - name: Install test server dependencies
        working-directory: ./tests/support/test_server
        run: mix deps.get
      - name: Build test server
        working-directory: ./tests/support/test_server
        run: mix compile
      - name: Run test server in background
        working-directory: ./tests/support/test_server
        run: mix phx.server &

      - name: Cache android
        id: cache-android
        uses: actions/cache@v4
        env:
          cache-name: cache-android
        with:
          path: ~/android
          key: ${{ runner.os }}-android-${{ env.cache-name }}-${{ env.ANDROID_COMMANDLINE_TOOLS_VERSION }}
          restore-keys: |
            ${{ runner.os }}-android-${{ env.cache-name }}-${{ env.ANDROID_COMMANDLINE_TOOLS_VERSION }}
            ${{ runner.os }}-mix-
      - name: Install Android Command Line Tools dependencies
        run: brew install wget
      - name: Download Android Command Line Tools
        run: |
          if [ ! -d "$HOME/android/cmdline-tools/${ANDROID_COMMANDLINE_TOOLS_VERSION}" ]; then
            cd $HOME
            # clear old version if it exists
            rm -rf android
            mkdir -p android/cmdline-tools
            cd android/cmdline-tools
            PACKAGE=commandlinetools-mac-${ANDROID_COMMANDLINE_TOOLS_VERSION}_latest
            wget https://dl.google.com/android/repository/${PACKAGE}.zip
            unzip ${PACKAGE}.zip
            rm ${PACKAGE}.zip
            mv cmdline-tools ${ANDROID_COMMANDLINE_TOOLS_VERSION}
            ln -sf ${ANDROID_COMMANDLINE_TOOLS_VERSION} latest
          fi
      - name: Add Android home and subdirectories to environment
        run: |
          export ANDROID_HOME="$HOME/android"
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "${ANDROID_HOME}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_HOME}/emulator" >> $GITHUB_PATH
          echo "${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
      - name: sdkmanager setup
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" \
                               "platforms;android-${ANDROID_API}" \
                               "build-tools;${ANDROID_API}.0.2" \
                               "emulator" \
                               "ndk;${ANDROID_NDK_VERSION}" \
                               "${ANDROID_SYSTEM_IMAGE_PACKAGE}"


      - name: Create Android Virtual Device
        run: |
          echo no | \
            avdmanager create avd --force \
                                  --name AVD \
                                  --abi google_apis_playstore/arm64-v8a \
                                  --package "${ANDROID_SYSTEM_IMAGE_PACKAGE}"

      - name: Start Android emulator
        run: |
          echo "Starting ADB server"
          ${ANDROID_HOME}/platform-tools/adb start-server
          echo "Starting Emulator"
          ${ANDROID_HOME}/emulator/emulator -avd AVD -netdelay none -netspeed full -no-boot-anim -no-window -noaudio -accel auto -verbose &
          ${ANDROID_HOME}/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

      - name: Test phoenix_channel_clients
        run: |
          cargo-dinghy all-platforms
          cargo-dinghy all-devices
          export RUSTFLAGS="--cfg tokio_unstable"
          cargo-dinghy -p auto-android-aarch64-api${ANDROID_API} test
